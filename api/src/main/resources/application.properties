spring.datasource.url= jdbc:postgresql://${DB_HOST}:${DB_PORT}/compose-postgres
spring.datasource.username= compose-postgres
spring.datasource.password= compose-postgres

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
# for production, set this value to validate
spring.jpa.hibernate.ddl-auto= update


## Email configuration
spring.mail.host=email-smtp.${AWS_SES_REGION}.amazonaws.com
spring.mail.username=${AWS_SMTP_USERNAME}
spring.mail.password=${AWS_SMTP_PASSWORD}
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.port=587
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.templates.path=src/main/resources/email-templates/
from.email.address=${MEALMANAGER_EMAIL_FROM}

## Rabbit MQ
tutorial.client.duration=5000
spring.rabbitmq.host=${RABBITMQ_HOST}
spring.rabbitmq.port=${RABBITMQ_PORT}

## Frontend
cors.allowed.origin=${CORS_ALLOWED_ORIGIN}

# Clerk JWT Configuration
auth.jwt.jwks-uri=https://flexible-bass-47.clerk.accounts.dev/.well-known/jwks.json
auth.jwt.issuer=https://flexible-bass-47.clerk.accounts.dev
# aud is optinoal for Clerk tokens
# auth.jwt.audience=

# Logging configuration for debugging
logging.level.com.mealmanager.api.security=DEBUG
logging.level.org.springframework.security=DEBUG