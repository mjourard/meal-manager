name: Deploy Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: environment

jobs:
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml

  deploy-api:
    name: Deploy API
    needs: test
    runs-on: ubuntu-latest
    if: ${{ success() && (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.modified, 'api/') || contains(github.event.head_commit.added, 'api/')) }}
    environment: ${{ inputs.environment || 'production' }}
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          fi
      
      # Build and push Docker image (from build-api-image.yml)
      - name: Read Java version from pom.xml
        id: get_java_version
        run: |
          JAVA_VERSION=$(grep -A 1 '<java.version>' api/pom.xml | grep -oP '(?<=>)\d+(?=<)')
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK version according to pom.xml
        uses: actions/setup-java@v4
        with:
          java-version: ${{ steps.get_java_version.outputs.java_version }}
          distribution: 'corretto'
          cache: maven

      - name: Build with Maven
        run: cd api && mvn -B package -DskipTests -Denvfile.skip=true

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v3

    #   - name: Log in to the Container registry
    #     uses: docker/login-action@v3
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Extract metadata (tags, labels) for Docker
    #     id: meta
    #     uses: docker/metadata-action@v5
    #     with:
    #       images: ghcr.io/${{ github.repository }}-api
    #       tags: |
    #         type=sha,format=short
    #         type=ref,event=branch
    #         type=raw,value=${{ github.ref_name }}-${{ github.run_number }}
    #         type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

    #   - name: Build and push Docker image
    #     uses: docker/build-push-action@v6
    #     with:
    #       context: api
    #       file: api/Dockerfile.fly
    #       push: true
    #       tags: ${{ steps.meta.outputs.tags }}
    #       labels: ${{ steps.meta.outputs.labels }}
    #       cache-from: type=gha
    #       cache-to: type=gha,mode=max

      # Run deployment script
      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Run API deployment script
        run: |
          chmod +x deploy/scripts/fly-deploy.sh
          ./deploy/scripts/fly-deploy.sh
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-terraform:
    name: Deploy Infrastructure
    needs: test
    runs-on: ubuntu-latest
    if: ${{ success() && (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.modified, 'deploy/terraform/') || contains(github.event.head_commit.added, 'deploy/terraform/')) }}
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get Terraform version
        id: get_tf_version
        uses: ./.github/actions/get-terraform-version
        with:
          manifest_path: deploy/terraform/manifests/dns/providers.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.terraform_version }}
      
      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            export DEPLOY_ENV="${{ inputs.environment }}"
          else
            export DEPLOY_ENV="dev"
          fi
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "DEPLOY_ENV=$DEPLOY_ENV"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: See deployment user
        run: aws sts get-caller-identity
      
      - name: Initialize Terraform
        working-directory: deploy/terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: deploy/terraform
        run: terraform plan -var-file=environments/${{ env.DEPLOY_ENV }}.auto.tfvars -out=tfplan
      
      - name: Terraform Apply
        working-directory: deploy/terraform
        run: terraform apply tfplan 