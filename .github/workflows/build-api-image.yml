name: Build and Push API Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read Java version from pom.xml
        id: get_java_version
        run: |
          JAVA_VERSION=$(grep -A 1 '<java.version>' api/pom.xml | grep -oP '(?<=>)\d+(?=<)')
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK version according to pom.xml
        uses: actions/setup-java@v4
        with:
          java-version: ${{ steps.get_java_version.outputs.java_version }}
          distribution: 'corretto'
          cache: maven

      - name: Build with Maven
        run: cd api && mvn -B package --file pom.xml -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=${{ github.ref_name }}-${{ github.run_number }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: api
          file: api/Dockerfile.fly
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image details
        run: |
          echo "Image built and pushed with the following tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "To use this image in Terraform, set var.fly_api_image to:"
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.run_number }}" 